import json
import datetime
import os
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —Ñ–∞–π–ª–∞
CONFIG_FILE = "config.json"

def load_config():
    try:
        with open(CONFIG_FILE, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        print("‚ùå –û—à–∏–±–∫–∞: config.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
config = load_config()
TOKEN = config.get("BOT_TOKEN", "")

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json!")

DATA_FILE = "habit_data.json"

# –ë–∞–∑–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî UTC+0
UTC_TZ = pytz.utc

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_data():
    try:
        with open(DATA_FILE, "r") as file:
            data = json.load(file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
            for user_id in data:
                data[user_id].setdefault("days_tracked", 1)
                data[user_id].setdefault("days_no_sugar", 0)
                data[user_id].setdefault("current_streak", 0)
                data[user_id].setdefault("record_streak", 0)
                data[user_id].setdefault("first_day", None)
                data[user_id].setdefault("last_report_date", None)
                data[user_id].setdefault("habit_done", False)
                data[user_id].setdefault("previous_streak", 0)
            
            return data
    except FileNotFoundError:
        return {}

def save_data():
    with open(DATA_FILE, "w") as file:
        json.dump(habit_data, file, indent=4)

habit_data = load_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
async def send_action_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å", callback_data="done")],
        [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats")],
        [InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥–Ω—É—é —Å–µ—Ä–∏—é", callback_data="restore_streak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–∫–∞

    if query.data == "done":
        await done(update, context)
    elif query.data == "stats":
        await stats(update, context)
    elif query.data == "restore_streak":
        await restore_streak(update, context)

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or update.effective_user.first_name or f"User {user_id}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ UTC
    today = datetime.datetime.now(UTC_TZ).date().isoformat()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å
    if user_id not in habit_data:
        habit_data[user_id] = {
            "username": username,
            "days_tracked": 1,  # –ù–∞—á–∏–Ω–∞–µ–º —É—á–µ—Ç —Å 1 –¥–Ω—è
            "days_no_sugar": 1,  # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –±–µ–∑ —Å–∞—Ö–∞—Ä–∞
            "current_streak": 1,  # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫
            "record_streak": 1,  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ—Ä–¥–Ω—ã–π —Å—Ç—Ä–∏–∫
            "first_day": today,  # –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            "last_report_date": today,
            "habit_done": True,
            "previous_streak": 0  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        }
    else:
        # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–º–µ—á–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è
        if habit_data[user_id]["last_report_date"] == today:
            await update.callback_query.message.reply_text("–¢—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        habit_data[user_id]["days_tracked"] += 1
        habit_data[user_id]["days_no_sugar"] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å
        last_date = datetime.date.fromisoformat(habit_data[user_id]["last_report_date"])
        yesterday = (datetime.datetime.now(UTC_TZ) - datetime.timedelta(days=1)).date()

        if last_date == yesterday:  # –ï—Å–ª–∏ –æ—Ç–º–µ—Ç–∏–ª—Å—è –≤—á–µ—Ä–∞
            habit_data[user_id]["current_streak"] += 1
        else:  # –ï—Å–ª–∏ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å
            habit_data[user_id]["previous_streak"] = habit_data[user_id]["current_streak"]
            habit_data[user_id]["current_streak"] = 1  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ—Ä–¥–Ω—ã–π —Å—Ç—Ä–∏–∫
        if habit_data[user_id]["current_streak"] > habit_data[user_id]["record_streak"]:
            habit_data[user_id]["record_streak"] = habit_data[user_id]["current_streak"]

        habit_data[user_id]["last_report_date"] = today
        habit_data[user_id]["habit_done"] = True

    save_data()
    await update.callback_query.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {username}! –¢—ã –Ω–µ –µ–ª–∞ —Å–∞—Ö–∞—Ä —Å–µ–≥–æ–¥–Ω—è! üî•")

# –ö–æ–º–∞–Ω–¥–∞ /stats (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    if user_id not in habit_data:
        await update.callback_query.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
        return

    user_data = habit_data[user_id]

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –±–µ–∑ —Å–∞—Ö–∞—Ä–∞
    if user_data.get("days_no_sugar", 0) == 0:
        await update.callback_query.message.reply_text(f"{username}, –º—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–±–µ. –ù–∞—á–Ω–∏ –æ—Ç–º–µ—á–∞—Ç—å –¥–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è /done!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
    user_data.setdefault("days_tracked", 1)
    user_data.setdefault("days_no_sugar", 0)
    user_data.setdefault("current_streak", 0)
    user_data.setdefault("record_streak", 0)

    message = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üìÖ –î–Ω–µ–π –≤–µ–¥–µ—Ç—Å—è —É—á–µ—Ç: {user_data['days_tracked']}\n"
        f"üçè –î–Ω–µ–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞: {user_data['days_no_sugar']}\n"
        f"üî• –¢–µ–∫—É—â–∏–π —Å–µ—Ä–∏—è –±–µ–∑ —Å–∞—Ö–∞—Ä–∞: {user_data['current_streak']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"
        f"üèÜ –†–µ–∫–æ—Ä–¥: {user_data['record_streak']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
    )
    await update.callback_query.message.reply_text(message)

async def restore_streak(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    today = datetime.datetime.now(UTC_TZ).date().isoformat()
    yesterday = (datetime.datetime.now(UTC_TZ) - datetime.timedelta(days=1)).date().isoformat()

    if user_id not in habit_data:
        await update.callback_query.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
        return

    user_data = habit_data[user_id]

    if user_data["last_report_date"] == yesterday and user_data["current_streak"] == 0:
        user_data["current_streak"] = user_data["previous_streak"]  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç—Ä–∏–∫
        user_data["last_report_date"] = today  # –§–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–æ—Ç–º–µ—Ç–∏–ª—Å—è"
        save_data()
        await update.callback_query.message.reply_text("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        await update.callback_query.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –¢—ã –ª–∏–±–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–ª–∞ –¥–µ–Ω—å, –ª–∏–±–æ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")

async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(UTC_TZ).date().isoformat()

    for user_id, data in habit_data.items():
        if data["last_report_date"] != today or not data["habit_done"]:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –û—Ç–º–µ—Ç—å, –µ–ª–∞ –ª–∏ —Ç—ã —Å–∞—Ö–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É—è /done."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def finalize_day(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now(UTC_TZ).date().isoformat()

    for user_id, data in habit_data.items():
        if data["last_report_date"] != today:
            data["days_tracked"] += 1
            data["current_streak"] = 0
            data["habit_done"] = False

    save_data()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫."""
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or update.effective_user.first_name or f"User {user_id}"
    today = datetime.datetime.now(UTC_TZ).date().isoformat()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in habit_data:
        habit_data[user_id] = {
            "username": username,
            "days_tracked": 1,  # –ù–∞—á–∏–Ω–∞–µ–º —É—á–µ—Ç —Å 1 –¥–Ω—è
            "days_no_sugar": 0,  # –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞
            "current_record": 0,  # –¢–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥
            "best_record": 0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ—Ä–¥
            "first_day": today,  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            "last_report_date": None,
            "habit_done": False,
            "previous_record": 0
        }
        save_data()
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {username}! üéâ\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–æ—Ç–µ!\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å –¥–Ω–∏ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!")

    else:
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {username}! üòä")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    await send_action_buttons(update, context)

def main():
    application = Application.builder().token(TOKEN).build()

    # JobQueue –¥–ª—è –∑–∞–¥–∞—á
    job_queue = application.job_queue
    if job_queue is None:
        raise RuntimeError("JobQueue –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", send_action_buttons))
    application.add_handler(CallbackQueryHandler(button_click))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á (–≤ UTC)
    job_queue.run_daily(send_reminders, time=datetime.time(21, 0, tzinfo=UTC_TZ))
    job_queue.run_daily(finalize_day, time=datetime.time(0, 0, tzinfo=UTC_TZ))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()